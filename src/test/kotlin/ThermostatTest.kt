import org.junit.jupiter.api.Test
import org.mockito.Mockito
import kotlin.test.DefaultAsserter.assertEquals
import org.mockito.Mockito.*

internal class ThermostatTest {
    @Test
    fun testFanStatusIsFalseOnInitialisation() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        assertEquals("fanStatus is false initially", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testOptimalOperatingParametersAboveLower() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold + 2)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testOptimalOperatingParametersBelowLower() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold - 2)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testFanTurnsOnAtUpperAndStaysOn() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testFanTurnsOffAtLowerAndStaysOff() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, true)
        assertEquals("green light is on", thermostat.greenLedStatus, false)
        assertEquals("amber light is off", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold - 2)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testRedLightTurnsOnWhenOverHeatingAndStaysOn() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is on", thermostat.redLedStatus, true)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, true)
    }
    @Test
    fun testRedLightTurnsOffWhenCooledDownAndStaysOff() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, true)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
    @Test
    fun testCompleteCycle() {
        val thermometer: ThermometerStub = Mockito.mock(ThermometerStub::class.java)
        val thermostat = Thermostat(thermometer)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold - 2)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is on", thermostat.redLedStatus, true)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold + 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, true)
        `when`(thermometer.getTemp()).thenReturn(thermostat.overheatingThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is on", thermostat.fanStatus, true)
        assertEquals("green light is off", thermostat.greenLedStatus, false)
        assertEquals("amber light is on", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.upperThreshold - 1)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, true)
        assertEquals("green light is on", thermostat.greenLedStatus, false)
        assertEquals("amber light is off", thermostat.amberLedStatus, true)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
        `when`(thermometer.getTemp()).thenReturn(thermostat.lowerThreshold - 2)
        thermostat.reactToTemperatureChange()
        assertEquals("fan is off", thermostat.fanStatus, false)
        assertEquals("green light is on", thermostat.greenLedStatus, true)
        assertEquals("amber light is off", thermostat.amberLedStatus, false)
        assertEquals("red light is off", thermostat.redLedStatus, false)
    }
  }